{"version":3,"sources":["components/UserItem/UserItem.tsx","components/UserList/UserList.tsx","App.tsx","api/DataFromServer.ts","index.tsx"],"names":["UserItem","todo","key","id","className","style","backgroundColor","user","name","title","completed","toString","UserList","prepearedTodoList","useState","visibleUserList","setVisibleUserList","sortedBy","param","sort","a","b","localeCompare","Number","type","onClick","map","App","setPrepearedTodoList","loadingCondition","setLoadingConditon","length","Promise","all","fetch","then","respone","json","todoWithUser","todoItem","find","userItem","userId","disabled","ReactDOM","render","document","getElementById"],"mappings":"0OAMaA,EAAsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpC,OACE,wBAAIC,IAAKD,EAAKE,GAAIC,UAAU,aAC1B,wBACEA,UAAU,YACVC,MAAO,CAAEC,gBAAiB,eAEzBL,EAAKM,KAAKC,MAEb,wBACEJ,UAAU,YACVC,MAAO,CAAEC,gBAAiB,eAEzBL,EAAKQ,OAER,wBACEL,UAAWH,EAAKS,UAAY,wBAA0B,wBAErDT,EAAKS,UAAUC,cCjBXC,EAAsB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAAwB,EACdC,mBAAS,YAAID,IADC,mBACrDE,EADqD,KACpCC,EADoC,KAG5D,SAASC,EAASC,GAChB,OAAQA,GACN,IAAK,OACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEb,KAAKW,GAAOI,cAAcD,EAAEd,KAAKW,QAEvD,MACF,IAAK,QACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,GAAOI,cAAcD,EAAEH,QAE7C,MACF,IAAK,YACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUE,OAAOF,EAAEX,WAAaa,OAAOH,EAAEV,gBAQzD,OACE,2BAAON,UAAU,aACf,2BAAOA,UAAU,mBACf,wBAAIA,UAAU,4BACZ,wBAAIA,UAAU,+BACZ,4BACEA,UAAU,aACVoB,KAAK,SACLC,QAAS,kBAAMR,EAAS,UAH1B,SAQF,wBAAIb,UAAU,+BACZ,4BACEA,UAAU,aACVoB,KAAK,SACLC,QAAS,kBAAMR,EAAS,WAH1B,UAQF,wBAAIb,UAAU,+BACZ,4BACEA,UAAU,aACVoB,KAAK,SACLC,QAAS,kBAAMR,EAAS,eAH1B,gBAWN,+BAEIF,EAAgBW,KAAI,SAAAzB,GAAI,OACtB,kBAAC,EAAD,CAAUC,IAAKD,EAAKE,GAAIF,KAAMA,UCvB3B0B,G,MA5CC,WAAO,IAAD,EAC8Bb,mBAAyB,IADvD,mBACbD,EADa,KACMe,EADN,OAE2Bd,oBAAS,GAFpC,mBAEbe,EAFa,KAEKC,EAFL,KAqBpB,OACE,oCAEiC,IAA7BjB,EAAkBkB,OAEd,4BACEP,KAAK,SACLC,QAxBM,WAChBK,GAAmB,GAEnBE,QAAQC,IAAI,CCRPC,MAJY,8CAKhBC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAIpBH,MARY,8CAShBC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,YDGtBF,MAAK,YAAmB,IAAD,mBAAhB5B,EAAgB,KAChB+B,EADgB,KACIZ,KAAI,SAAAa,GAAQ,sBAE/BA,EAF+B,CAGlChC,KAAMA,EAAKiC,MAAK,SAAAC,GAAQ,OAAIA,EAAStC,KAAOoC,EAASG,eAIzDZ,GAAmB,GACnBF,EAAqBU,OAYfK,SAAUd,EACVzB,UAAU,YAJZ,QASA,kBAAC,EAAD,CAAUS,kBAAmBA,IAElCgB,GACC,uBAAGzB,UAAU,gBAAb,kBEvCRwC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.792bdeb5.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const UserItem: FC<Props> = ({ todo }) => {\n  return (\n    <tr key={todo.id} className=\"user-item\">\n      <td\n        className=\"user-item\"\n        style={{ backgroundColor: 'darkorange' }}\n      >\n        {todo.user.name}\n      </td>\n      <td\n        className=\"user-item\"\n        style={{ backgroundColor: 'aquamarine' }}\n      >\n        {todo.title}\n      </td>\n      <td\n        className={todo.completed ? 'succes-load user-item' : 'faild-load user-item'}\n      >\n        {todo.completed.toString()}\n      </td>\n    </tr>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { UserItem } from '../UserItem/UserItem';\n\ninterface Props {\n  prepearedTodoList: TodoWithUser[];\n}\n\nexport const UserList: FC<Props> = ({ prepearedTodoList }) => {\n  const [visibleUserList, setVisibleUserList] = useState([...prepearedTodoList]);\n\n  function sortedBy(param: string) {\n    switch (param) {\n      case 'name':\n        setVisibleUserList(\n          [...prepearedTodoList]\n            .sort((a, b) => a.user[param].localeCompare(b.user[param])),\n        );\n        break;\n      case 'title':\n        setVisibleUserList(\n          [...prepearedTodoList]\n            .sort((a, b) => a[param].localeCompare(b[param])),\n        );\n        break;\n      case 'completed':\n        setVisibleUserList(\n          [...prepearedTodoList]\n            .sort((a, b) => Number(b.completed) - Number(a.completed)),\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <table className=\"user-list\">\n      <thead className=\"user-list-title\">\n        <tr className=\"user-list-title-item-row\">\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('name')}\n            >\n              Name\n            </button>\n          </th>\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('title')}\n            >\n              Title\n            </button>\n          </th>\n          <th className=\"user-list-title-item-column\">\n            <button\n              className=\"sorted-btn\"\n              type=\"button\"\n              onClick={() => sortedBy('completed')}\n            >\n              Completed\n            </button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          visibleUserList.map(todo => (\n            <UserItem key={todo.id} todo={todo} />\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { getUsers, getTodos } from './api/DataFromServer';\nimport { UserList } from './components/UserList/UserList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [prepearedTodoList, setPrepearedTodoList] = useState<TodoWithUser[]>([]);\n  const [loadingCondition, setLoadingConditon] = useState(false);\n\n  const loadUsers = () => {\n    setLoadingConditon(true);\n\n    Promise.all([getUsers(), getTodos()])\n      .then(([user, todo]) => {\n        const todoWithUser = todo.map(todoItem => (\n          {\n            ...todoItem,\n            user: user.find(userItem => userItem.id === todoItem.userId) as User,\n          }\n        ));\n\n        setLoadingConditon(false);\n        setPrepearedTodoList(todoWithUser);\n      });\n  };\n\n  return (\n    <>\n      {\n        prepearedTodoList.length === 0\n          ? (\n            <button\n              type=\"button\"\n              onClick={loadUsers}\n              disabled={loadingCondition}\n              className=\"load-btn\"\n            >\n              Load\n            </button>\n          )\n          : <UserList prepearedTodoList={prepearedTodoList} />\n      }\n      {loadingCondition && (\n        <p className=\"loading-text\">Loading ...</p>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","const URL_API_USER = 'https://jsonplaceholder.typicode.com/users';\nconst URL_API_TODO = 'https://jsonplaceholder.typicode.com/todos';\n\nexport function getUsers(): Promise<User[]> {\n  return fetch(URL_API_USER)\n    .then(respone => respone.json());\n}\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(URL_API_TODO)\n    .then(respone => respone.json());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}