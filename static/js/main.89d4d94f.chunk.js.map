{"version":3,"sources":["components/UserItem/UserItem.tsx","components/UserList/UserList.tsx","App.tsx","api/DataFromServer.ts","index.tsx"],"names":["UserItem","todo","key","id","style","backgroundColor","user","name","title","className","completed","toString","UserList","userList","useState","visibleUserList","setVisibleUserList","sortedBy","param","sort","a","b","localeCompare","Number","type","onClick","map","App","setUserList","loadingCondition","setLoadingConditon","length","Promise","all","fetch","then","respone","json","response","todoWithUser","todoItem","find","userItem","userId","disabled","ReactDOM","render","document","getElementById"],"mappings":"0OAMaA,EAAsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpC,OACE,wBAAIC,IAAKD,EAAKE,IACZ,wBAAIC,MAAO,CAAEC,gBAAiB,eAAiBJ,EAAKK,KAAKC,MACzD,wBAAIH,MAAO,CAAEC,gBAAiB,eAAiBJ,EAAKO,OACpD,wBAAIC,UAAWR,EAAKS,UAAY,aAAe,aAAcT,EAAKS,UAAUC,cCJrEC,EAAsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,mBAAS,YAAID,IADR,mBAC5CE,EAD4C,KAC3BC,EAD2B,KAGnD,SAASC,EAASC,GAChB,OAAQA,GACN,IAAK,OACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEd,KAAKY,GAAOI,cAAcD,EAAEf,KAAKY,QAEvD,MACF,IAAK,QACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,GAAOI,cAAcD,EAAEH,QAE7C,MACF,IAAK,YACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUE,OAAOF,EAAEX,WAAaa,OAAOH,EAAEV,gBAQzD,OACE,+BACE,+BACE,4BACE,4BACE,4BAAQD,UAAU,YAAYe,KAAK,SAASC,QAAS,kBAAMR,EAAS,UAApE,SAEF,4BACE,4BAAQR,UAAU,YAAYe,KAAK,SAASC,QAAS,kBAAMR,EAAS,WAApE,UAEF,4BACE,4BAAQR,UAAU,YAAYe,KAAK,SAASC,QAAS,kBAAMR,EAAS,eAApE,gBAKN,+BAEIF,EAAgBW,KAAI,SAAAzB,GAAI,OACtB,kBAAC,EAAD,CAAUC,IAAKD,EAAKE,GAAIF,KAAMA,UCX3B0B,G,MAtCC,WAAO,IAAD,EACYb,mBAAyB,IADrC,mBACbD,EADa,KACHe,EADG,OAE2Bd,oBAAS,GAFpC,mBAEbe,EAFa,KAEKC,EAFL,KAoBpB,OACE,oCAEwB,IAApBjB,EAASkB,OACJ,4BAAQP,KAAK,SAASC,QArBf,WAChBK,GAAmB,GAEnBE,QAAQC,IAAI,CCVPC,MAAM,8CACVC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UAIpBH,MAAM,8CACVC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,YDKtBF,MAAK,SAAAG,GACJ,IAAMC,EAAeD,EAAS,GAAGZ,KAAI,SAAAc,GAAQ,sBAEtCA,EAFsC,CAGzClC,KAAMgC,EAAS,GAAGG,MAAK,SAAAC,GAAQ,OAAIA,EAASvC,KAAOqC,EAASG,eAIhEb,GAAmB,GACnBF,EAAYW,OAQmCK,SAAUf,GAApD,QACD,kBAAC,EAAD,CAAUhB,SAAUA,IAGxBgB,EAEI,0CAEA,QEjCZgB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.89d4d94f.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const UserItem: FC<Props> = ({ todo }) => {\n  return (\n    <tr key={todo.id}>\n      <td style={{ backgroundColor: 'darkorange' }}>{todo.user.name}</td>\n      <td style={{ backgroundColor: 'aquamarine' }}>{todo.title}</td>\n      <td className={todo.completed ? 'succesLoad' : 'faildLoad'}>{todo.completed.toString()}</td>\n    </tr>\n  );\n}\n","import React, { FC, useState } from 'react';\nimport { UserItem } from '../UserItem/UserItem';\n\ninterface Props {\n  userList: TodoWithUser[];\n}\n\nexport const UserList: FC<Props> = ({ userList }) => {\n  const [visibleUserList, setVisibleUserList] = useState([...userList]);\n\n  function sortedBy(param: string) {\n    switch (param) {\n      case 'name':\n        setVisibleUserList(\n          [...userList]\n            .sort((a, b) => a.user[param].localeCompare(b.user[param])),\n        );\n        break;\n      case 'title':\n        setVisibleUserList(\n          [...userList]\n            .sort((a, b) => a[param].localeCompare(b[param])),\n        );\n        break;\n      case 'completed':\n        setVisibleUserList(\n          [...userList]\n            .sort((a, b) => Number(b.completed) - Number(a.completed)),\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>\n            <button className=\"sortedBtn\" type=\"button\" onClick={() => sortedBy('name')}>Name</button>\n          </th>\n          <th>\n            <button className=\"sortedBtn\" type=\"button\" onClick={() => sortedBy('title')}>Title</button>\n          </th>\n          <th>\n            <button className=\"sortedBtn\" type=\"button\" onClick={() => sortedBy('completed')}>Completed</button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          visibleUserList.map(todo => (\n            <UserItem key={todo.id} todo={todo} />\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { getUsers, getTodos } from './api/DataFromServer';\nimport { UserList } from './components/UserList/UserList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [userList, setUserList] = useState<TodoWithUser[]>([]);\n  const [loadingCondition, setLoadingConditon] = useState(false);\n  const loadUsers = () => {\n    setLoadingConditon(true);\n\n    Promise.all([getUsers(), getTodos()])\n      .then(response => {\n        const todoWithUser = response[1].map(todoItem => (\n          {\n            ...todoItem,\n            user: response[0].find(userItem => userItem.id === todoItem.userId) as User,\n          }\n        ));\n\n        setLoadingConditon(false);\n        setUserList(todoWithUser);\n      });\n  };\n\n  return (\n    <>\n      {\n        userList.length === 0\n          ? (<button type=\"button\" onClick={loadUsers} disabled={loadingCondition}>Load</button>)\n          : <UserList userList={userList} />\n      }\n      {\n        loadingCondition\n          ? (\n            <p>Loading ...</p>\n          )\n          : null\n      }\n    </>\n  );\n};\n\nexport default App;\n","export function getUsers(): Promise<User[]> {\n  return fetch('https://jsonplaceholder.typicode.com/users')\n    .then(respone => respone.json());\n}\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch('https://jsonplaceholder.typicode.com/todos')\n    .then(respone => respone.json());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}