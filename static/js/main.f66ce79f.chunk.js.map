{"version":3,"sources":["components/UserList/UserList.tsx","App.tsx","api/usersFromServer.ts","api/todosFromServer.ts","index.tsx"],"names":["UserList","userList","useState","visibleUserList","setVisibleUserList","sortedBy","param","sort","a","b","user","localeCompare","Number","completed","className","type","onClick","map","todo","key","id","style","backgroundColor","name","title","toString","App","setUserList","loadingCondition","setLoadingConditon","length","users","fetch","then","respone","json","todos","todoWithUser","todoItem","find","userItem","userId","disabled","ReactDOM","render","document","getElementById"],"mappings":"0OAMaA,EAAsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,mBAAS,YAAID,IADR,mBAC5CE,EAD4C,KAC3BC,EAD2B,KAGnD,SAASC,EAASC,GAChB,OAAQA,GACN,IAAK,OACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKJ,GAAOK,cAAcF,EAAEC,KAAKJ,QAEvD,MACF,IAAK,QACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,GAAOK,cAAcF,EAAEH,QAE7C,MACF,IAAK,YACHF,EACE,YAAIH,GACDM,MAAK,SAACC,EAAGC,GAAJ,OAAUG,OAAOH,EAAEI,WAAaD,OAAOJ,EAAEK,gBAQzD,OACE,+BACE,+BACE,4BACE,4BACE,4BAAQC,UAAU,YAAYC,KAAK,SAASC,QAAS,kBAAMX,EAAS,UAApE,SAEF,4BACE,4BAAQS,UAAU,YAAYC,KAAK,SAASC,QAAS,kBAAMX,EAAS,WAApE,UAEF,4BACE,4BAAQS,UAAU,YAAYC,KAAK,SAASC,QAAS,kBAAMX,EAAS,eAApE,gBAKN,+BAEIF,EAAgBc,KAAI,SAAAC,GAAI,OACtB,wBAAIC,IAAKD,EAAKE,IACZ,wBAAIC,MAAO,CAAEC,gBAAiB,eAAiBJ,EAAKR,KAAKa,MACzD,wBAAIF,MAAO,CAAEC,gBAAiB,eAAiBJ,EAAKM,OACpD,wBAAIV,UAAWI,EAAKL,UAAY,aAAe,aAAcK,EAAKL,UAAUY,mBCN3EC,G,MA5CC,WAAO,IAAD,EACYxB,mBAAyB,IADrC,mBACbD,EADa,KACH0B,EADG,OAE2BzB,oBAAS,GAFpC,mBAEb0B,EAFa,KAEKC,EAFL,KA0BpB,OACE,oCAEwB,IAApB5B,EAAS6B,OACJ,4BAAQf,KAAK,SAASC,QA3Bf,WAChBa,GAAmB,GACnB,IAAME,ECVDC,MAAM,8CACVC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UDUnBC,EEXDJ,MAAM,8CACVC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UFYzBJ,EAAME,MAAK,SAAAvB,GAGT,OAFAmB,GAAmB,GAEZnB,KACNuB,MAAK,SAAAvB,GACN0B,EAAMH,MAAK,SAAAf,GACT,IAAMmB,EAAenB,EAAKD,KAAI,SAAAqB,GAAQ,sBAE/BA,EAF+B,CAGlC5B,KAAMA,EAAK6B,MAAK,SAAAC,GAAQ,OAAIA,EAASpB,KAAOkB,EAASG,eAIzDd,EAAYU,UASmCK,SAAUd,GAApD,QACD,kBAAC,EAAD,CAAU3B,SAAUA,IAGxB2B,EAEI,0CAEA,QGxCZe,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f66ce79f.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\n\ninterface Props {\n  userList: TodoWithUser[];\n}\n\nexport const UserList: FC<Props> = ({ userList }) => {\n  const [visibleUserList, setVisibleUserList] = useState([...userList]);\n\n  function sortedBy(param: string) {\n    switch (param) {\n      case 'name':\n        setVisibleUserList(\n          [...userList]\n            .sort((a, b) => a.user[param].localeCompare(b.user[param])),\n        );\n        break;\n      case 'title':\n        setVisibleUserList(\n          [...userList]\n            .sort((a, b) => a[param].localeCompare(b[param])),\n        );\n        break;\n      case 'completed':\n        setVisibleUserList(\n          [...userList]\n            .sort((a, b) => Number(b.completed) - Number(a.completed)),\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>\n            <button className=\"sortedBtn\" type=\"button\" onClick={() => sortedBy('name')}>Name</button>\n          </th>\n          <th>\n            <button className=\"sortedBtn\" type=\"button\" onClick={() => sortedBy('title')}>Title</button>\n          </th>\n          <th>\n            <button className=\"sortedBtn\" type=\"button\" onClick={() => sortedBy('completed')}>Completed</button>\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          visibleUserList.map(todo => (\n            <tr key={todo.id}>\n              <td style={{ backgroundColor: 'darkorange' }}>{todo.user.name}</td>\n              <td style={{ backgroundColor: 'aquamarine' }}>{todo.title}</td>\n              <td className={todo.completed ? 'succesLoad' : 'faildLoad'}>{todo.completed.toString()}</td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { getUsers } from './api/usersFromServer';\nimport { getTodos } from './api/todosFromServer';\nimport { UserList } from './components/UserList/UserList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [userList, setUserList] = useState<TodoWithUser[]>([]);\n  const [loadingCondition, setLoadingConditon] = useState(false);\n  const loadUsers = () => {\n    setLoadingConditon(true);\n    const users = getUsers();\n    const todos = getTodos();\n\n    users.then(user => {\n      setLoadingConditon(false);\n\n      return user;\n    }).then(user => {\n      todos.then(todo => {\n        const todoWithUser = todo.map(todoItem => (\n          {\n            ...todoItem,\n            user: user.find(userItem => userItem.id === todoItem.userId) as User,\n          }\n        ));\n\n        setUserList(todoWithUser);\n      });\n    });\n  };\n\n  return (\n    <>\n      {\n        userList.length === 0\n          ? (<button type=\"button\" onClick={loadUsers} disabled={loadingCondition}>Load</button>)\n          : <UserList userList={userList} />\n      }\n      {\n        loadingCondition\n          ? (\n            <p>Loading ...</p>\n          )\n          : null\n      }\n    </>\n  );\n};\n\nexport default App;\n","export function getUsers(): Promise<User[]> {\n  return fetch('https://jsonplaceholder.typicode.com/users')\n    .then(respone => respone.json());\n}\n","export function getTodos(): Promise<Todo[]> {\n  return fetch('https://jsonplaceholder.typicode.com/todos')\n    .then(respone => respone.json());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}